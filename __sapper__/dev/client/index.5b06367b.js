import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as create_slot, v as validate_slots, a as createEventDispatcher, o as onDestroy, e as element, b as space, f as claim_element, g as children, h as detach_dev, j as claim_space, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, p as listen_dev, u as update_slot, t as transition_in, q as transition_out, r as run_all, w as onMount, x as globals, y as text, z as claim_text, A as set_data_dev, B as create_component, C as query_selector_all, D as claim_component, E as mount_component, F as destroy_component } from './client.4413a241.js';

/* src/components/Register.svelte generated by Svelte v3.29.0 */
const file = "src/components/Register.svelte";

function create_fragment(ctx) {
	let div2;
	let div0;
	let t0;
	let div1;
	let t1;
	let button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t1 = space();
			button = element("button");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (default_slot) default_slot.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);

			button = claim_element(div2_nodes, "BUTTON", {
				autofocus: true,
				class: true,
				"aria-label": true
			});

			children(button).forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "modal-background");
			add_location(div0, file, 49, 2, 1037);
			attr_dev(div1, "class", "modal-content");
			add_location(div1, file, 50, 2, 1089);
			button.autofocus = true;
			attr_dev(button, "class", "modal-close is-large");
			attr_dev(button, "aria-label", "close");
			add_location(button, file, 53, 2, 1141);
			attr_dev(div2, "class", "modal");
			add_location(div2, file, 48, 0, 1015);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div2, t0);
			append_dev(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append_dev(div2, t1);
			append_dev(div2, button);
			current = true;
			button.focus();

			if (!mounted) {
				dispose = [
					listen_dev(window, "keydown", /*handle_keydown*/ ctx[1], false, false, false),
					listen_dev(div0, "click", /*close*/ ctx[0], false, false, false),
					listen_dev(button, "click", /*close*/ ctx[0], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Register", slots, ['default']);
	const dispatch = createEventDispatcher();
	const close = () => dispatch("close");
	let modal;
	let email;

	const handle_keydown = e => {
		if (e.key === "Escape") {
			close();
			return;
		}

		if (e.key === "Tab") {
			// trap focus
			const nodes = modal.querySelectorAll("*");

			const tabbable = Array.from(nodes).filter(n => n.tabIndex >= 0);
			let index = tabbable.indexOf(document.activeElement);
			if (index === -1 && e.shiftKey) index = 0;
			index += tabbable.length + (e.shiftKey ? -1 : 1);
			index %= tabbable.length;
			tabbable[index].focus();
			e.preverntDefault();
		}
	};

	const previously_focused = typeof document !== "undefined" && document.activeElement;

	if (previously_focused) {
		onDestroy(() => {
			previously_focused.focus();
		});
	}

	const toggleSubmit = () => {
		email = "";
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Register> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		onDestroy,
		dispatch,
		close,
		modal,
		email,
		handle_keydown,
		previously_focused,
		toggleSubmit
	});

	$$self.$inject_state = $$props => {
		if ("modal" in $$props) modal = $$props.modal;
		if ("email" in $$props) email = $$props.email;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [close, handle_keydown, $$scope, slots];
}

class Register extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Register",
			options,
			id: create_fragment.name
		});
	}
}

/* src/routes/index.svelte generated by Svelte v3.29.0 */

const { console: console_1 } = globals;
const file$1 = "src/routes/index.svelte";

// (56:6) {#if discord !== undefined}
function create_if_block(ctx) {
	let a;
	let t0_value = /*discord*/ ctx[0].name + "";
	let t0;
	let br0;
	let t1;
	let br1;
	let t2;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t0 = text(t0_value);
			br0 = element("br");
			t1 = text("\n          Discord\n          ");
			br1 = element("br");
			t2 = text("Instant Invite!");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			br0 = claim_element(a_nodes, "BR", {});
			t1 = claim_text(a_nodes, "\n          Discord\n          ");
			br1 = claim_element(a_nodes, "BR", {});
			t2 = claim_text(a_nodes, "Instant Invite!");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file$1, 56, 85, 1388);
			add_location(br1, file$1, 58, 10, 1423);
			attr_dev(a, "href", a_href_value = /*discord*/ ctx[0].instant_invite);
			attr_dev(a, "class", "box has-text-centered svelte-11qqid");
			add_location(a, file$1, 56, 8, 1311);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t0);
			append_dev(a, br0);
			append_dev(a, t1);
			append_dev(a, br1);
			append_dev(a, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*discord*/ 1 && t0_value !== (t0_value = /*discord*/ ctx[0].name + "")) set_data_dev(t0, t0_value);

			if (dirty & /*discord*/ 1 && a_href_value !== (a_href_value = /*discord*/ ctx[0].instant_invite)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(56:6) {#if discord !== undefined}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let section;
	let div0;
	let t1;
	let div2;
	let div1;
	let img;
	let img_src_value;
	let t2;
	let p;
	let a;
	let t3;
	let t4;
	let register;
	let t5;
	let t6;
	let div3;
	let current;
	let mounted;
	let dispose;

	register = new Register({
			props: { toggle: /*toggleModal*/ ctx[1] },
			$$inline: true
		});

	let if_block = /*discord*/ ctx[0] !== undefined && create_if_block(ctx);

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			div0 = element("div");
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			img = element("img");
			t2 = space();
			p = element("p");
			a = element("a");
			t3 = text("< register >");
			t4 = space();
			create_component(register.$$.fragment);
			t5 = space();
			if (if_block) if_block.c();
			t6 = space();
			div3 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-m6o6gu\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t1 = claim_space(section_nodes);
			div2 = claim_element(section_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			img = claim_element(div1_nodes, "IMG", {
				class: true,
				src: true,
				alt: true,
				width: true
			});

			t2 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			a = claim_element(p_nodes, "A", { href: true });
			var a_nodes = children(a);
			t3 = claim_text(a_nodes, "< register >");
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			claim_component(register.$$.fragment, div1_nodes);
			t5 = claim_space(div1_nodes);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t6 = claim_space(section_nodes);
			div3 = claim_element(section_nodes, "DIV", { class: true });
			children(div3).forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "CodeMonkeyWTF";
			attr_dev(div0, "class", "hero-head");
			add_location(div0, file$1, 49, 2, 935);
			attr_dev(img, "class", "logo_huge svelte-11qqid");
			if (img.src !== (img_src_value = "code-monkeys-orange-dark-large.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "code monkey dot w t f logo");
			attr_dev(img, "width", "250");
			add_location(img, file$1, 52, 6, 1021);
			attr_dev(a, "href", "#");
			add_location(a, file$1, 53, 59, 1192);
			attr_dev(p, "class", "is-align-self-center");
			add_location(p, file$1, 53, 6, 1139);
			attr_dev(div1, "class", "container svelte-11qqid");
			add_location(div1, file$1, 51, 4, 991);
			attr_dev(div2, "class", "hero body svelte-11qqid");
			add_location(div2, file$1, 50, 2, 963);
			attr_dev(div3, "class", "hero-foot");
			add_location(div3, file$1, 62, 2, 1483);
			attr_dev(section, "class", "hero is-fullheight is-bold svelte-11qqid");
			add_location(section, file$1, 48, 0, 888);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div0);
			append_dev(section, t1);
			append_dev(section, div2);
			append_dev(div2, div1);
			append_dev(div1, img);
			append_dev(div1, t2);
			append_dev(div1, p);
			append_dev(p, a);
			append_dev(a, t3);
			append_dev(div1, t4);
			mount_component(register, div1, null);
			append_dev(div1, t5);
			if (if_block) if_block.m(div1, null);
			append_dev(section, t6);
			append_dev(section, div3);
			current = true;

			if (!mounted) {
				dispose = listen_dev(p, "click", /*showModal*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			const register_changes = {};
			if (dirty & /*toggleModal*/ 2) register_changes.toggle = /*toggleModal*/ ctx[1];
			register.$set(register_changes);

			if (/*discord*/ ctx[0] !== undefined) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(register.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(register.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(register);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const URL = "https://discordapp.com/api/guilds/698177341586800672/widget.json";

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	let discord;
	let toggleModal = false;

	onMount(async function () {
		const response = await fetch(URL);
		$$invalidate(0, discord = await response.json());
		console.log(discord);
	});

	const showModal = () => {
		$$invalidate(1, toggleModal = !toggleModal);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		onMount,
		Register,
		URL,
		discord,
		toggleModal,
		showModal
	});

	$$self.$inject_state = $$props => {
		if ("discord" in $$props) $$invalidate(0, discord = $$props.discord);
		if ("toggleModal" in $$props) $$invalidate(1, toggleModal = $$props.toggleModal);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [discord, toggleModal, showModal];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNWIwNjM2N2IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1JlZ2lzdGVyLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgb25EZXN0cm95IH0gZnJvbSAnc3ZlbHRlJ1xuXG4gIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKClcbiAgY29uc3QgY2xvc2UgPSAoKSA9PiBkaXNwYXRjaCgnY2xvc2UnKVxuXG4gIGxldCBtb2RhbFxuICBsZXQgZW1haWxcblxuICBjb25zdCBoYW5kbGVfa2V5ZG93biA9IChlKSA9PiB7XG4gICAgaWYgKGUua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgY2xvc2UoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGUua2V5ID09PSAnVGFiJykge1xuICAgICAgLy8gdHJhcCBmb2N1c1xuICAgICAgY29uc3Qgbm9kZXMgPSBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKCcqJylcbiAgICAgIGNvbnN0IHRhYmJhYmxlID0gQXJyYXkuZnJvbShub2RlcykuZmlsdGVyKChuKSA9PiBuLnRhYkluZGV4ID49IDApXG5cbiAgICAgIGxldCBpbmRleCA9IHRhYmJhYmxlLmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudClcbiAgICAgIGlmIChpbmRleCA9PT0gLTEgJiYgZS5zaGlmdEtleSkgaW5kZXggPSAwXG5cbiAgICAgIGluZGV4ICs9IHRhYmJhYmxlLmxlbmd0aCArIChlLnNoaWZ0S2V5ID8gLTEgOiAxKVxuICAgICAgaW5kZXggJT0gdGFiYmFibGUubGVuZ3RoXG4gICAgICB0YWJiYWJsZVtpbmRleF0uZm9jdXMoKVxuICAgICAgZS5wcmV2ZXJudERlZmF1bHQoKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHByZXZpb3VzbHlfZm9jdXNlZCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuXG4gIGlmIChwcmV2aW91c2x5X2ZvY3VzZWQpIHtcbiAgICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgICAgcHJldmlvdXNseV9mb2N1c2VkLmZvY3VzKClcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgdG9nZ2xlU3VibWl0ID0gKCkgPT4ge1xuICAgIGVtYWlsID0gJydcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbjwvc3R5bGU+XG5cbjxzdmVsdGU6d2luZG93IG9uOmtleWRvd249e2hhbmRsZV9rZXlkb3dufSAvPlxuXG48ZGl2IGNsYXNzPVwibW9kYWxcIj5cbiAgPGRpdiBjbGFzcz1cIm1vZGFsLWJhY2tncm91bmRcIiBvbjpjbGljaz17Y2xvc2V9IC8+XG4gIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XG4gICAgPHNsb3QgLz5cbiAgPC9kaXY+XG4gIDxidXR0b24gYXV0b2ZvY3VzIGNsYXNzPVwibW9kYWwtY2xvc2UgaXMtbGFyZ2VcIiBhcmlhLWxhYmVsPVwiY2xvc2VcIiBvbjpjbGljaz17Y2xvc2V9IC8+XG48L2Rpdj5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnXG4gIGltcG9ydCBSZWdpc3RlciBmcm9tICcuLi9jb21wb25lbnRzL1JlZ2lzdGVyLnN2ZWx0ZSdcbiAgY29uc3QgVVJMID0gJ2h0dHBzOi8vZGlzY29yZGFwcC5jb20vYXBpL2d1aWxkcy82OTgxNzczNDE1ODY4MDA2NzIvd2lkZ2V0Lmpzb24nXG4gIGxldCBkaXNjb3JkXG4gIGxldCB0b2dnbGVNb2RhbCA9IGZhbHNlXG4gIG9uTW91bnQoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goVVJMKVxuICAgIGRpc2NvcmQgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICBjb25zb2xlLmxvZyhkaXNjb3JkKVxuICB9KVxuXG4gIGNvbnN0IHNob3dNb2RhbCA9ICgpID0+IHtcbiAgICB0b2dnbGVNb2RhbCA9ICF0b2dnbGVNb2RhbFxuICB9XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAuY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgZmxleC13cmFwOiBub3dyYXA7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgLmhlcm8ge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyNjJkMzU7XG4gIH1cblxuICAuYm94IHtcbiAgICBjb2xvcjogeWVsbG93O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzQ3NWI7XG4gICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cblxuICAubG9nb19odWdlIHtcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG4gIDx0aXRsZT5Db2RlTW9ua2V5V1RGPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxzZWN0aW9uIGNsYXNzPVwiaGVybyBpcy1mdWxsaGVpZ2h0IGlzLWJvbGRcIj5cbiAgPGRpdiBjbGFzcz1cImhlcm8taGVhZFwiIC8+XG4gIDxkaXYgY2xhc3M9XCJoZXJvIGJvZHlcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICA8aW1nIGNsYXNzPVwibG9nb19odWdlXCIgc3JjPVwiY29kZS1tb25rZXlzLW9yYW5nZS1kYXJrLWxhcmdlLnN2Z1wiIGFsdD1cImNvZGUgbW9ua2V5IGRvdCB3IHQgZiBsb2dvXCIgd2lkdGg9XCIyNTBcIiAvPlxuICAgICAgPHAgY2xhc3M9XCJpcy1hbGlnbi1zZWxmLWNlbnRlclwiIG9uOmNsaWNrPXtzaG93TW9kYWx9PjxhIGhyZWY9XCIjXCI+Jmx0IHJlZ2lzdGVyICZndDwvYT48L3A+XG4gICAgICA8UmVnaXN0ZXIgdG9nZ2xlPXt0b2dnbGVNb2RhbH0gLz5cbiAgICAgIHsjaWYgZGlzY29yZCAhPT0gdW5kZWZpbmVkfVxuICAgICAgICA8YSBocmVmPXtkaXNjb3JkLmluc3RhbnRfaW52aXRlfSBjbGFzcz1cImJveCBoYXMtdGV4dC1jZW50ZXJlZFwiPntkaXNjb3JkLm5hbWV9PGJyIC8+XG4gICAgICAgICAgRGlzY29yZFxuICAgICAgICAgIDxiciAvPkluc3RhbnQgSW52aXRlITwvYT5cbiAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiaGVyby1mb290XCIgLz5cbjwvc2VjdGlvbj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzREE4QzJCLEdBQWM7eUNBR0MsR0FBSzsyQ0FJK0IsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FsRDNFLFFBQVEsR0FBRyxxQkFBcUI7T0FDaEMsS0FBSyxTQUFTLFFBQVEsQ0FBQyxPQUFPO0tBRWhDLEtBQUs7S0FDTCxLQUFLOztPQUVILGNBQWMsR0FBSSxDQUFDO01BQ25CLENBQUMsQ0FBQyxHQUFHLEtBQUssUUFBUTtHQUNwQixLQUFLOzs7O01BSUgsQ0FBQyxDQUFDLEdBQUcsS0FBSyxLQUFLOztTQUVYLEtBQUssR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsR0FBRzs7U0FDbEMsUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBRSxDQUFDLElBQUssQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDO09BRTVELEtBQUssR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxhQUFhO09BQy9DLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLEdBQUcsQ0FBQztHQUV6QyxLQUFLLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDO0dBQy9DLEtBQUssSUFBSSxRQUFRLENBQUMsTUFBTTtHQUN4QixRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUs7R0FDckIsQ0FBQyxDQUFDLGVBQWU7Ozs7T0FJZixrQkFBa0IsVUFBVSxRQUFRLEtBQUssV0FBVyxJQUFJLFFBQVEsQ0FBQyxhQUFhOztLQUVoRixrQkFBa0I7RUFDcEIsU0FBUztHQUNQLGtCQUFrQixDQUFDLEtBQUs7Ozs7T0FJdEIsWUFBWTtFQUNoQixLQUFLLEdBQUcsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJDaUIwRCxHQUFPLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0RBQW5FLEdBQU8sSUFBQyxjQUFjOzs7Ozs7Ozs7Ozs7O3FFQUFpQyxHQUFPLElBQUMsSUFBSTs7NkVBQW5FLEdBQU8sSUFBQyxjQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29DQUZmLEdBQVc7Ozs7NEJBQ3hCLEdBQU8sUUFBSyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttREFGZ0IsR0FBUzs7Ozs7OzRFQUNqQyxHQUFXOzs7bUJBQ3hCLEdBQU8sUUFBSyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BcER4QixHQUFHLEdBQUcsa0VBQWtFOzs7OztLQUMxRSxPQUFPO0tBQ1AsV0FBVyxHQUFHLEtBQUs7O0NBQ3ZCLE9BQU87UUFDQyxRQUFRLFNBQVMsS0FBSyxDQUFDLEdBQUc7a0JBQ2hDLE9BQU8sU0FBUyxRQUFRLENBQUMsSUFBSTtFQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU87OztPQUdmLFNBQVM7a0JBQ2IsV0FBVyxJQUFJLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
